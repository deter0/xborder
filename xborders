#!/bin/python3
import cairo
import json

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Gdk', '3.0')

from gi.repository import Gtk, Gdk
import draw

import re
import subprocess
import sys

# The following few lines are to fix paths. I couldn't find a better way :/
from pathlib import Path

path = Path(__file__).parent.resolve()
json_path = (path / "config.json").resolve()

with open(json_path) as config:
    config = json.load(config)

def get_win():
	completed_process = subprocess.run(["xdotool", "getactivewindow", "getwindowgeometry"], capture_output=True)
	if (completed_process.returncode != 0):
		return None
	process_stdout = completed_process.stdout.decode("utf-8")
	numbers = [int(x) for x in re.findall('[-0-9]+', process_stdout)]
	x = numbers[1]
	y = numbers[2]
	width = numbers[4]
	height = numbers[5]
	return ((x,y), (width,height))

def get_mouse_location():
	completed_process = subprocess.run(["xdotool", "getmouselocation"], capture_output=True)
	if (completed_process.returncode != 0):
		sys.stderr.write("Error getting mouse location.\n")
		return None
	process_stdout = completed_process.stdout.decode("utf-8")
	numbers = [int(x) for x in re.findall('[-0-9]+', process_stdout)]
	return (numbers[0], numbers[1])

def get_screen_size(display):
	mon_geoms = [
		display.get_monitor(i).get_geometry()
		for i in range(display.get_n_monitors())
	]

	x0 = min(r.x            for r in mon_geoms)
	y0 = min(r.y            for r in mon_geoms)
	x1 = max(r.x + r.width  for r in mon_geoms)
	y1 = max(r.y + r.height for r in mon_geoms)

	return x1 - x0, y1 - y0

root = Gdk.get_default_root_window()
screen = root.get_screen()
screen_width, screen_height = get_screen_size(Gdk.Display.get_default())
rectangle = cairo.RectangleInt(0, config['screenTopPadding'], screen_width, screen_height - config['screenTopPadding'])
class Highlight (Gtk.Window):
	def __init__(self):
		super().__init__(type=Gtk.WindowType.POPUP)
		
		self.set_app_paintable(True)
		screen = self.get_screen()
		visual = screen.get_rgba_visual()
		self.set_visual(visual)
		self.show_all()
		
		self.resize(screen_width, screen_height)
		self.move(0, 0)
		
		self.fullscreen()
		self.set_decorated(False)
		self.set_skip_taskbar_hint(True)
		self.set_skip_pager_hint(True)
		self.set_keep_above(True)
		self.set_type_hint(Gdk.WindowTypeHint.NOTIFICATION)
		
		self.set_accept_focus(False)
		self.set_focus_on_map(False)
		self.input_shape_combine_region(cairo.Region())
		
		self.drawingarea = Gtk.DrawingArea()
		self.drawingarea.connect ('button-press-event',self.callback)
		self.drawingarea.connect ('button-release-event',self.callback2)
		Gdk.EventMask.POINTER_MOTION_MASK
		self.drawingarea.set_events(Gdk.EventMask.EXPOSURE_MASK  
															| Gdk.EventMask.BUTTON_PRESS_MASK
															| Gdk.EventMask.BUTTON_RELEASE_MASK  )
		self.add(self.drawingarea)

		self.connect('draw', self._on_draw)
	def callback(self, widget, event):
		if event.button == 1:
			self.rect_x = event.x
			self.rect_y = event.y
		return True
	def callback2(self, widget, event):
		if event.button == 1:
			self.rect_x = None
			self.rect_y = None
		return True
	rect_x = None
	rect_y = None
	def _on_draw(self, _wid, ctx):
		if not screen.is_composited():
				subprocess.Popen(['notify-send', "xborder", "xborders terminated due to no compositor."])
				exit(1)
		ctx.save()

		win_data = get_win()
		if (win_data != None):
			draw.draw_rectangle(
				ctx, win_data[0][0], win_data[0][1],
				win_data[1][0], win_data[1][1],
				config['borderRadius'], config['borderWidth'],
				[0, 0, 0, 0],
				[config['borderRGBA'][0], config['borderRGBA'][1], config['borderRGBA'][2], config['borderRGBA'][3]])

			self.set_accept_focus(False)
			self.set_focus_on_map(False)
			self.input_shape_combine_region(cairo.Region())
			self.rect_x = None
			self.rect_y = None
		else:
			self.set_accept_focus(True)
			self.set_focus_on_map(True)
			self.input_shape_combine_region(cairo.Region(rectangle))
			
		if (self.rect_x and self.rect_y):
			if (config['desktopDragStressToy']):
				current = get_mouse_location()
				draw.draw_rectangle(
					ctx, self.rect_x, self.rect_y,
					current[0] - self.rect_x, current[1] - self.rect_y,
					0, 4,
					[config['borderRGBA'][0], config['borderRGBA'][1], config['borderRGBA'][2], 0.5],
					[config['borderRGBA'][0], config['borderRGBA'][1], config['borderRGBA'][2], 0.85]
				)
		
		ctx.restore()
		self.queue_draw()

def main():
	win = Highlight()
	win.connect("destroy", Gtk.main_quit)
	win.set_keep_above(True)
	win.set_title("Highlight")

	win.show_all()

	Gtk.main()

if __name__=="__main__":
	try:
		main()
	except KeyboardInterrupt:
		exit(0)
else:
	print("This program is not meant to be imported to other Python modules. Please run xborders as a standalone script!")
